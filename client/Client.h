#ifndef _CLIENT_H_INCLUDED

#define _CLIENT_H_INCLUDED 1



#if _MSC_VER > 1000

#pragma once

#endif // _MSC_VER > 1000



// warning 4201 generated by mmysystem.h

#pragma warning ( disable : 4201 ) 



#include <mmsystem.h>

#include <pplib.h>

#include "resource.h"



#define INCL_EMAIL_INVALIDATING	(ADMIN_CLIENT && 0)

//int BlockProcessServerVersionInfo=0;

#define BASE_URL	"http://www.e-mediasoftware.com/"

#define BASE_URL2	"http://www.e-mediasoftware.com/"



#if ADMIN_CLIENT

  #define DAYLIGHT_SAVINGS_TIME	0	// compile presets for DST instead of standard time? (admin only!)

  #define MIN_HAND_RANK_POPUP	0	// set for auto pop-up on hand ranks

#endif



enum  {

	CRITSECPRI_MESSAGE_THREAD = CRITSECPRI_USER_START,

	CRITSECPRI_CARDROOM,

	CRITSECPRI_CLIENTSOCK,

	CRITSECPRI_CHAT,

	CRITSECPRI_DRAW,

	CRITSECPRI_SOUND,

};



extern HINSTANCE hInst;				// current program instance

extern HWND hInitialWindow;			// window handle for our root window

extern HWND hCardRoomDlg;			// handle to cardroom dialog box (if open)

extern HWND hViewTransactionsDLG;	// handle to view transactions box

extern HWND hEditCreditableDLG;		// handle to dlg for changing potential credit on transactions

extern HWND hCheckTrackingDLG;		// handle to check tracking dlg

extern HWND hTourSummaryDlg;		// handle to tournament email request dlg

extern HWND hUpdateAddressDlg;		// handle to address modify dlg

#if ADMIN_CLIENT

extern HWND hInfoBlock;				// handle to admin info block window

extern HWND hAdminStats;			// admin stats window (if open)

extern HWND hCheckRun;				// admin check run window (if open)

extern HWND hReqPlayerInfoDLG;		// handle to player info request dlg

//extern HWND hSetCCLimits;			// admin, set CC purchase limits for player

#endif

#if USE_RICH_EDIT_FOR_CHAT_MONITOR

extern HINSTANCE hInstRich;

#endif

extern HBITMAP hCardRoomBgnd;		// handle to background picture for dialog box.

extern HPALETTE hCardRoomPalette;	// handle to palette for bgnd picture


extern HBITMAP original_hbm;



#define MAX_TABLE_FONTS	6			// # of different fonts we have for table stuff

extern HFONT hTableFonts[MAX_TABLE_FONTS];

extern int iCardRoomDlgMinimizedFlag;	// set if the cardroom dialog is minimized.

extern ClientDisplayTabIndex GameListTabIndex;	// DISPLAY_TAB_* for the current game list view control

extern int iProgramInstanceCount;	// # of other application instances running when our instance started.

extern char *szAppName;

extern int ExtraSocketsToOpen;		// might be set to something if we're testing

extern int LoggedIn;				// logged-in status (defined in pplib.h as LOGIN_*)
extern int preLogInToServer(char *detail_msg);

extern int iDisableServerCommunications;

extern int iRDTSCAvailFlag;			// set if the rdtsc() instruction is available on this system

extern int iUserLoggingOffSystemFlag;	// set if the user is logging off (including to shut down) his system

extern int iOurAppIsActive;			// set if we're the active application.

extern int iDisableServerSwitching;	// set to disable switching from server to server.

extern int iSeatedAtATournamentTableFlag;	// set if we are currently seated at a tournament table

extern int iCCProcessingEstimate;	// estimate (in minutes) of how long cc processing will take (from server)

extern int iMaxTournamentTables;	// admin: current max # of tournament tables allowed to be opened (of each type)



extern WORD32 dwLastUserActionMessageTime;	// SecondCounter when mouse and or keyboard message last received.

extern struct AccountRecord LoggedInAccountRecord;	// AccountRecord sent from server (if any)

extern struct AccountRecord ArToView;	// AccountRecord about to be viewed

extern WORD32 dwRandomEntropy;		// 32 bits that we add non-predictable stuff to.

extern WORD32 ShotClockFlags;		// SCUF_* (copied from server)

extern WORD32 dwMoneyInPlay;		// copy from most recent structure from server

extern WORD32 dwMoneyLoggedIn;		// copy from most recent structure from server



#define MAX_TRANSLATOR_HWNDS	10	// max # of HWNDs we keep track of for keyboard translation

extern HWND hKeyboardTranslateHwndTable[MAX_TRANSLATOR_HWNDS];



// Add/remove an hwnd from the table of windows we watch for keyboard translation

void AddKeyboardTranslateHwnd(HWND hwnd);

void RemoveKeyboardTranslateHwnd(HWND hwnd);



// If the cardroom window is open and this client version

// is newer than the last official release, assume we're a beta

// and that the upgrade menu item must be changed.

void ChangeUpgradeMenuToRevertIfNecessary(void);



// Close the 'going to table' dialog if it is open.

void CloseGoingToTableDialog(void);

extern HWND hGoingToTableDlg;



#if ADMIN_CLIENT

extern int iAdminClientFlag;	// Set if this client is running in adminstrator mode

extern int RakeRate;

extern time_t RakeSaveTime;

extern HWND hAdminEditAccountDlg;

extern HWND hTransferMoneyDlg;

extern HWND hChatMonitorDlg;

extern WORD32 AutoLookupPlayerID;

extern int AutoShowServerStats;	// set if we should automatically show server stats

extern int iFlashTitleBars;		// count-down while flashing menu bars.

#endif



extern int ExitNowFlag;				// Set when all threads should exit.

extern int iBitmapLoadingProblem;	// set if there was a problem loading at least one bitmap

extern char *ProgramRegistryPrefix;



// Version information about a program (local or remote).

extern struct VersionInfo ServerVersionInfo;

extern struct VersionNumber ClientVersionNumber;



extern int PortNumber;					// TCP/IP port number we listen on

#if INCL_SSL_SUPPORT

extern int PortNumber_SSL;				// TCP/IP port number we listen on for SSLv3/TLSv1 encrypted connections

#endif

extern int InitialConnectionTimeout;	// # of seconds after connect() before we give up on a socket.

#define MAX_SERVERNAME_LEN	64

extern char ServerName[MAX_SERVERNAME_LEN];	// name of server.



extern char *GameRuleNames[MAX_GAME_RULES];

extern char *GameRuleNamesShort[MAX_GAME_RULES];



#define MAX_TABLES	(MAX_GAMES_PER_PLAYER)	// Max # of tables we can play at once.

#define MAX_BUTTONS_PER_TABLE 4	// # of dialog box buttons used to wait for human input



struct ChatEntry {

	WORD32 game_serial_number;			// game # the chat text came in on

	BYTE8 text_type;					// not yet used, but might include msg type (such as 'from dealer').

	char name[MAX_COMMON_STRING_LEN];	// name of originator (only filled in by server)

	char message[MAX_CHAT_MSG_LEN];		// ASCII message.

};



#define CHAT_LINES				150

#define ADMIN_CHAT_LINES		3000

#define WAITLIST_STATUS_STR_LEN	150

#define CHAT_FREEZE_SECONDS		15		// # of seconds after last user movement to freeze auto-scrolling of chat window

#define MAX_TGNS				60		// MaxTournamentGameNumberString (summary of what tourn game # we're on)



#define HEADS_UP_SEAT_1		4	// heads up seat # when numbered 1-10, NOT 0-9

#define HEADS_UP_SEAT_2		7	// heads up seat # when numbered 1-10, NOT 0-9	



// Flop animation states:

//	3 cards coming down face down to the left most position (only draw one)

//  Flip all 3 cards over in left most position (only last card is visible)

//	2 cards sliding to the right revealing first card

//	1 card  sliding to the right revealing second card

enum  {

	FLOP_ANIM_INIT,

	FLOP_ANIM_SLIDING_DOWN,		// sliding down from the dealer to the flop area

	FLOP_ANIM_FLIPPING_OVER,	// flipping over

	FLOP_ANIM_SLIDING_RIGHT_INIT,// sliding one card over (initializing)

	FLOP_ANIM_SLIDING_RIGHT,	// sliding one card over

};



extern struct TableInfo {		// All the information about each game we're playing

	int table_index;			// for going backwards from a table ptr to an index

	HWND hwnd;					// Handle to main display window for this table.

	int active_table_window;	// set if our window is the currently active one.

	HBITMAP hbm_background;		// original background (many tables may be using this bitmap - do not modify)

	HBITMAP hbm_off_screen;		// bitmap for doing the off-screen drawing into

	HPALETTE hpalette;			// palette for hbm_off_screen (if any)

	PPCRITICAL_SECTION draw_crit_sec;	// Critical section for drawing to hbm_off_screen

	HWND ToolTipHwnd;			// this table's ToolTip hwnd (if any)

	WORD32 table_serial_number;	// Server's serial number for this table

	WORD32 game_serial_number;	// game serial number the last time the controls were updated

	WORD32 prev_game_serial_number;	// previous game serial number the last time the controls were updated (if any)

	GameRules game_rules;		// GAME_RULE_* for this table

	ClientDisplayTabIndex client_display_tab_index;	// DISPLAY_TAB_*

	int max_players_per_table;	// max # of players that can sit at this type of table.

	int redraw_needed;			// set when RedrawTable() needs to be called.

	int minimized_flag;			// set if our window is currently minimized.

	int animation_disable_flag;	// set if we should NOT animate (when minimized or not current window)

	int watching_flag;			// set if we're just watching this table.

	int sit_down_allowed;		// set if we're allowed to sit at this table (valid only when watching).

	int wait_for_bb;			// set if we're waiting for the big blind

	struct GameCommonData GameCommonData;		// copied from NewestGCD when a GPD arrives

	struct GameCommonData NewestGameCommonData;	// saved when it arrives

	WORD32 ticks_when_gcd_arrived;	// GetTickCount() when the GameCommonData arrived.

	struct GamePlayerData GamePlayerData;

	WORD32 ticks_when_gpd_arrived;	// GetTickCount() when the GamePlayerData arrived.

	struct GamePlayerInputRequest GamePlayerInputRequest;

  #if ADMIN_CLIENT

	WORD16 last_input_request_serial_number_displayed;	// serial number of last input request displayed

	WORD32 actions_hidden_ticks;				// GetTicks() when actions should no longer be hidden

  #endif

	struct GamePlayerInputResult GamePlayerInputResult;

	struct ClientStateInfo ClientState;

	BYTE8 sit_out_request_serial_num;			// gcd sitout s/n (if we get something unexpected, we sit out).

	int forced_to_sit_out_flag;					// set to indicate the server forced us to sit out.

	struct ClientStateInfo PrevClientState;		// last ClientStateInfo structure sent to server

	WORD32 last_input_result_seconds; 			// SecondCounter when last input result sent to server for whatever reason.

	WORD16 last_input_request_serial_number;	// serial # of last input request or input request cancel we've received

	WORD32 redraw_controls_time;				// SecondCounter when we should update all the controls again (for no other reason)

	WORD32 fold_game_serial_number;				// set whenever we fold.  No more 'in turn' actions allowed.

	int button_actions[MAX_BUTTONS_PER_TABLE];	// map of Actions for what each displayed button should return

	int button_actions_are_in_turn;				// set if they're things like 'fold in turn', 'check/call in turn', etc.

	int button_1_alternate_meaning;				// 0=none, 1=Join Waiting list, 1=Unjoin Waiting List

	struct MiscClientMessage misc_client_msg;

	struct MiscClientMessage MiscMsgSitdown;	// sitdown message for this table

	int bar_snack;								// our current bar snack (if any)

	BYTE8 old_bar_snack[MAX_PLAYERS_PER_GAME];	// copy of what the bar snacks were the last time we drew them.

	int no_smoking_flag;						// set if we have selected 'no smoking' for this table.

	int invalidate_top_right_text;				// set if we should invalidate the text at the top right of the table window

	struct ProximityHighlightingInfo proximity_highlight_list;

	WORD32 last_activated_time;					// SecondCounter when this table window was last activated.

	int heads_up_seat_1;						// seat index for seat 1 (if heads up)

	int heads_up_seat_2;						// seat index for seat 2 (if heads up)

	int zero_ante_stud_flag;					// set when this is a zero ante stud game

	// tournament

	int tournament_table;						// set when this is a tournament table

	char tournament_game_number_str[MAX_TGNS];	// used for a summary string of tournament level

	// chat box

	PPCRITICAL_SECTION chat_crit_sec;			// Critical section for refreshing chat box

	struct ChatEntry ChatBuffer[CHAT_LINES];	// chat text for this table

	// dealer buffered text during dealing

	#define MAX_BUFFERED_DEALER_CHAT_LINES	20

	struct ChatEntry BufferedDealerChat[MAX_BUFFERED_DEALER_CHAT_LINES];

	int chat_buffer_index;			// circular current pointer ( % CHAT_LINES )

	//int chat_scroll_disabled;		// T/F is chat box should be disabled from scrolling right now

	int chat_scroll_position;		// expected scroll position.  If it changes unexpectedly, the user did it.

	WORD32 chat_last_user_scroll_time;	// SecondCounter when user last manually scroll the chat window

	WORD32 chat_last_scroll_position_check;	// SecondCounter when we last checked the scroll position

	WORD32 chat_chars_deleted;		// # of chars of text deleted off top of buffer

	int chat_lines_deleted;			// # of lines of text deleted off top of buffer

	int currently_typing_chat;		// T/F user is currently typing into the chat window

	int quiet_dealer;				// if T, only important dealer text gets displayed

	int already_selected_chatbox;	// T/F if first call to select chat box

	int displayed_chat_instruction;	// T/F if first call to set instruction in chat type box

	int minimum_buy_in;				// if it's been changed from the default

	int player_info_tooltips_initialized[MAX_PLAYERS_PER_GAME];	// set if tooltip has been initialized.

	int player_id_tooltips_initialized[MAX_PLAYERS_PER_GAME];	// set if tooltip has been initialized.

	int pot_tooltips_initialized[MAX_PLAYERS_PER_GAME];	// set if tooltip for each pot has been initialized.

  #if ADMIN_CLIENT

	int computer_play;				// set if we're using our computer logic to play (debug only)

	int computer_play_seconds;		// current value of the delay spinner control

	WORD32 computer_play_answer_time;// SecondCounter for when a computer play answer can be sent out

	int computer_play_answer_delay;	// # of seconds we should wait before answering (answer time is calculated from this)

	int current_hand_rank;			// current starting hand ranking number

    #if MIN_HAND_RANK_POPUP		

	  int pop_up_on_hand_rank;			// T/F pop up window of rank is as good as specified?	

	  int pop_up_on_hand_rank_number;	// hand rank specification for popping up

	#endif

  #endif



	char wait_list_status_string[WAITLIST_STATUS_STR_LEN];



	// Last action animation stuff...

	//no longer used: int iLastActionPlayerIndex;	// 0..MAX_PLAYERS_PER_TABLE-1

	int iLastActionStatus[MAX_PLAYERS_PER_GAME];// counting down to zero.  zero = no last action being displayed.

	BYTE8 last_action[MAX_PLAYERS_PER_GAME];	// saved last_action indicators

	BYTE8 last_highlighted_waiting_player;		// p_waiting_player last time we determined highlight status

	BYTE8 blinking_player_flag;					// set if we're blinking a player id box

	BYTE8 blinking_player_status;				// last blink status we drew

	WORD32 highlighted_waiting_player_start_ticks;	// ms ticks when highlight started.

	WORD32 last_action_update_ticks;			// ms Ticks when indicators last updated.

	WORD32 tourn_summary_request_time;			// SecondCounter when we should pop up the dlg



	// ----- Animation related stuff -----

	BlitQueue blit_queue;			// queue used for blitting sorted bitmaps

	// note: you must hold draw_crit_sec before accessing any of these.

	int animation_flag;				// set if anything is being animated.

	int animation_disable_count;	// count down timer.  If set, don't animate.

	// Button

	int previous_button_position;	// seat # the button was previously in

	AnimationPoint AnimButton;		// Dealer 'button' animation object

	// Chips

	ChipType chip_type;				// What kind of chips does it use?

	int display_pots[MAX_PLAYERS_PER_GAME];			// size of each pot to display

	int previous_preferred_stack_size;

	int player_display_chips[MAX_PLAYERS_PER_GAME];	// # of chips to display for each player

	int old_chips_in_front_of_player[MAX_PLAYERS_PER_GAME]; // old # of chips in front of each player

	int player_display_chips_last_sound[MAX_PLAYERS_PER_GAME];	// chips he had last sound we played

	AnimationPoint AnimChips[MAX_PLAYERS_PER_GAME];	// Chips for each player

	int chips_game_over_completed;	// set when game over animation for chips is finished.

	// Cards

	int card_previous_game_over_flag;	// previous game over flag for cards

	int flop_animation_state;

	Card display_common_cards[MAX_PUBLIC_CARDS];

	AnimationPoint AnimCommonCards;	// Common cards animation object

	int dealing_flag;				// set when dealing cards.

	int new_cards_dealt_flag;		// set whenever new cards get dealt

	int card_deal_index;			// card # we're currently dealing to a player

	int card_deal_player;			// player we're currently dealing a single card to

	WORD32 dwLastDealtCardTicks;	// ms ticks when last card got dealt

	AnimationPoint AnimDealtCard;	// for animating a single card as it gets dealt.

	Card display_cards[MAX_PLAYERS_PER_GAME][MAX_PRIVATE_CARDS];

	Card dealt_cards[MAX_PLAYERS_PER_GAME][MAX_PRIVATE_CARDS];		// cards dealt... can't be removed until AFTER displayed.

	AnimationPoint AnimCards[MAX_PLAYERS_PER_GAME];	// Cards for each player

	int invalidate_player_id_boxes;	// set if player ID boxes need redrawing

} Table[MAX_TABLES];



extern struct CardRoom_JoinTable PendingJoinTableResults[MAX_TABLES];	// structs received by comm thread but not yet processed by message thread

extern struct GameCommonData SavedGameCommonData;	// any received with no open table go here



#define DEFAULT_FILE_VERSION	7	// increment each time we make it incompatible.

extern struct Defaults {

	WORD32 dwLength;				// size of this structure/disk file

	WORD32 dwVersion;				// version # of structure/disk file (changed when made incompatible)

	int dirty_shutdown;				// set FALSE when we do a clean shutdown, TRUE otherwise

	WORD32 password_encryption_method;	// for now, unused.  In the future, non-zero could mean new methods.

	char user_id[MAX_PLAYER_USERID_LEN];

	char _pad1[32];

	char password[MAX_PLAYER_PASSWORD_LEN];

	char _pad2[32];

	// *** All changes must occur below this line ***

	int changed_flag;				// set each time this structure is updated.

	int news_serial_number;			// serial # of last displayed news item.

	int iQuietDealerType;			// set to the current dealer combo box index.  NO LONGER A FLAG!

	int iHidePlayMoneyTables;		// set to hide the play money tables

	int iDefaultBuyInWithOther;		// default to buying in with 'other' instead of 'everything'

	int preferred_stakes;			// big blind amount for the type of game the player prefers.

	int preferred_min_players;		// min # of players this player prefers before joining

	WORD32 last_server_ip_address;	// the IP address we last connected to (or at least tried to)

	ClientDisplayTabIndex preferred_display_tab_index;	// game type the player prefers.

	BYTE8 keep_cardroom_window_open;// set to keep the cardroom window open (non-minimized) when we activate a game window

	BOOL8 forget_login_preferences;	// !!! unknown... someone should document the variables they add (not mentioning any names :)

	WORD32 last_create_account_time;// time() when an account was last created (if any)

	long last_exit_splash_display_time;	// time() when exit splash (sunset) was last displayed

	int i4ColorDeckEnabled;			// set if 4 color deck is enabled on menu

	int iSoundsDisabled;			// set if sound effects are disabled on menu

	int iAnimationDisabled;			// set if animation is disabled on menu

	int iAlertMonitorLevel;			// 0-9, the admin monitor filter level (admin)

	int iAlertPlayTables;			// set if checkbox on alert monitor is ticked

	int iAlertRealTables;			// set if checkbox on alert monitor is ticked

	int iAlertPopUp;				// set if checkbox on alert monitor is ticked

	int iAlertSound;				// set if checkbox on alert monitor is ticked

	int iNoSmokingFlag;				// set if user prefers a no smoking table.

	int iBarSnacksDisabled;			// set if bar snacks should all be disable for this client

	int iDisableGraphicOptimizations;// set to disable some graphics optimizations that cause problems for some clients (e.g. nvidia bugs)

	int iAlertTournTables;			// set if checkbox on alert monitor is ticked

	int iShotClockAlarm;			// admin: set if the shot clock should play an alarm when expiring

	WORD32 computer_serial_number;	// current computer serial number (assigned by server)

	BYTE8 save_cc_information_flag;		// set if we should save the client's cc information

	BYTE8 saved_cc_type;				// saved CCTYPE_* (or zero if not saved)

	char saved_cc_number[CCFIELD_LONG];	// saved cc number (or blank if not saved)

	char saved_cc_month[CCFIELD_SHORT];	// saved cc month (or blank if not saved)

	char saved_cc_year[CCFIELD_SHORT];	// saved cc year (or blank if not saved)
	int upgrade;

} Defaults;

void WriteDefaults(int force_write);



// struct used to pass info into the buy-in dialog

struct BuyInDLGInfo {

	WORD32 chips;

	WORD32 minimum_allowed;

	int seating_position;

	int buy_in_type;	// JTS_* (usually JTS_JOIN or JTS_REBUY)

	struct TableInfo *ti;

};



// Private application defined window messages

//  I originally started these at WM_USER but I found that I was

// getting WM_USER messages whenever the dialog box was clicked on.  WM_USER

// up to 0x7FFF are apparently reserved for user defined messages, so I

// started at 0x7000 instead.

enum {

	WMP_CLOSE_YOURSELF = 0x7000,// ask a dialog box to close itself (can be posted from another thread)

	WMP_SHOW_YOURSELF,			// ask a dialog box to show itself (can be posted from another thread)

	WMP_UPDATE_CONNECT_STATUS,	// ask main thread to force an update of the connection status

	WMP_UPDATE_GAME_LIST,		// ask the cardroom dialog box to update the game list (lParam = game type)

	WMP_UPDATE_LOGIN_PROGRESS,	// ask main thread to update the progress indicator

	WMP_UPDATE_PLAYER_INFO,		// ask cashier to update player's account info

	WMP_UPDATE_FAKEBANK_CHIPS,	// ask the buy-in dlg to update its fake bank-chips amount

	WMP_UPDATE_REALBANK_CHIPS,	// ask the buy-in dlg to update its real bank-chips amount

	WMP_UPDATE_SPLASH_STATUS,	// ask the splash/status window to update it's status

	WMP_UPDATE_TABLE_INFO,		// ask the cardroom dialog box to update info for a table (lParam = table_serial_number)

	WMP_UPDATE_YOURSELF,		// ask a dialog or control to update itself (usually due to new globals vars)

	WMP_OPEN_TABLE_WINDOW,		// ask main thread to open a new table window.  lParam = struct CardRoom_JoinTable *

	WMP_SEAT_AVAIL,				// ask the cardroom to open handle a SeatAvail structure from server.

	WMP_MISC_CLIENT_MSG,		// ask dlg to display a misc client message structure.

	WMP_PROCESS_VERSION_INFO,	// ask main thread to process the ServerVersionInfo structure

	WMP_SHOW_ABOUT_DLG,			// ask the cardroom dialog box to pop up an "About" dailog

  #if 0	

	WMP_PROMPT_JOIN_WAITLIST,	// ask cardroom to prompt user to join a waiting list.  wParam contains default table serial number

  #endif

	WMP_SHOW_CARDROOM,			// ask main thread to show the cardroom window

	WMP_SHOW_LOGIN_PROGRESS,	// ask main thread to display login progress indicator

	WMP_SHOW_TABLE_WINDOW,		// ask main thread to call ShowTable(lParam, wParam);

	WMP_BUY_MORE_CHIPS,			// ask table to pop up the "buy chips" dlg

	WMP_MISC_CLIENT_MESSAGE,	// ask window to handle a struct MiscClientMessage (ptr sent as lParam)

	WMP_REFRESH_CHAT,			// ask table to refresh the chat window

	WMP_SET_CHAT_FOCUS,			// ask table to set keyboard focus to the chat text entry window

	WMP_PLAY_SOUND,				// ask main thread to play a particular sound effect

	WMP_NEW_ACCOUNT_RECORD,		// tell account edit window a new record arrived

  #if ADMIN_CLIENT

	WMP_OPEN_CHECK_RUN,			// admin only: open the check run window

	WMP_REFRESH_MONITOR_CHAT,	// admin only: update chat monitoring window

	WMP_FLASH_TITLE_BARS,		// ask main thread to flash all known title bars

  #endif

	WMP_FLUSH_DEALER_CHAT_BUFFER,// ask table to flush any pending buffered dealer chat text

	WMP_DISPLAY_BAD_EMAIL_NOTICE,// ask main thread to display a notice indicating their email address is invalid.

	WMP_TOP_YOURSELF_IF_NECESSARY,	// ask a table to top itself if it's not already topped.

	WMP_REQUEST_TOURNAMENT_EMAIL,// pop up dlg asking for Y/N to tournament email

	WMP_INFO_BLOCK_ARRIVED,		// admin only: an information block has arrived

	WMP_FORCE_REFRESH_MONITOR,	// admin only: force refresh on chat monitor

	WMP_LIMITATION_APPROVED,

	WMP_LIMITATION_LARGE,

	WMP_LIMITATION_SMALL,

};



// Card Room variables...

extern struct CardRoom_TableSummarySerialNums Server_TableSerialNums;

extern struct CardRoom_TableSummarySerialNums Our_TableSerialNums;

//extern PPCRITICAL_SECTION MessageThreadCritSec;	// lock around the message thread

extern PPCRITICAL_SECTION ClientSockCritSec;	// lock around changes to the ClientSock variable

extern PPCRITICAL_SECTION CardRoomVarsCritSec;

extern struct MiscClientMessage CardRoom_misc_client_msg;

extern struct MiscClientMessage Ecash_misc_client_msg;



#ifdef _LLIP_H_INCLUDED

  extern Packet *TableSummaryListPackets[MAX_CLIENT_DISPLAY_TABS];

  extern ClientSocket *ClientSock;

#endif

extern char szOurIPString[];	// either "123.456.2.223" or "123.456.2.223 / 192.168.1.1"

extern IPADDRESS OurLocalIP;	// our local ip address (local subnet)

extern long TimeDiffWithServer;	// an offset (in seconds) between the server's time and our time.



extern struct CardRoom_TableInfo *TableInfo;

extern struct AccountInfo SavedAccountInfo;	// most recent struct AccountInfo sent from server

extern int TableInfo_table_count;		// # of entries in the TableInfo structure.

extern WORD32 dwTableInfoSerialNum;		// table serial number for currently highlighted table

extern struct CardRoom_SeatAvail SeatAvail;	// current SeatAvail structure from server

extern HWND   SeatAvail_hwnd;			// hwnd for the seat available dialog box

extern WORD32 SeatAvailSecondCounter;	// SecondCounter when SeatAvail structure received from Server.

extern int MinimizeWindowsFlag;			// set to minimize our cardroom and table windows on creation

#if ADMIN_CLIENT

extern int AutoJoinDefaultTable;		// debug: auto-join (and play) the default table.

extern int RunningManyFlag;				// set if we're running a lot of clients and they should minimize their resource usage

extern WORD32 dwEarliestPacketSendTime;	// debug only: used for delaying all I/O for testing

#endif

extern char LoginUserID[MAX_PLAYER_USERID_LEN];

extern char LoginPassword[MAX_PLAYER_PASSWORD_LEN];

extern int iRequestPriorityLogin;

extern int AutoLoginFlag;			// set to automatically login (cmd line 'autologin')

extern int AutoUpgradeDisable;		// set if we should not act on upgrades

extern int AskedForMorePlayChips;	// T/F if player requested more chips

extern char ConnectionStatusString[];

extern int ClientSockConnected;		// set after initial communications with server has succeeded.

extern WORD32 dwLastPacketReceivedSeconds;	// SecondCounter when last packet was received.

extern WORD32 dwLastPingSentTime;			// SecondCounter when last ping sent from us

extern char   szConnectionTypeString[];		// string to indicate the type of connection (for the about box)

extern WORD32 dwCheckForInputButtons_Ticks;	// Ticks when we should check if a window needs topping so user can answer input

extern WORD32 dwIgnoreInputButtons_Ticks;	// if set, we should ignore table input buttons until this time.



extern int StringToChips(char *str);



void StartCommThread(void);		// start up the communications thread

void SendPing(void);			// Send a ping to the server.

ErrorType SendKeepAlive(void);	// Send a KeepAlive2 structure to the server



// Close the connection to the server.  Make sure all data

// got sent out.  This function may take a little while.

void CloseConnectionToServerCleanly(void);



// Flag a table window as needing redrawing and post a message

// to its message queue if necessary.

void FlagRedrawTable(int table_index);



// Count the number of tables that currently have game action

// buttons up and showing.  See CheckIfActionButtonsShowing() for

// details of that definition.

int CountTablesWithActionButtonsShowing(void);



// Invalidate all the player id boxes on a table (so they get redrawn)

void InvalidatePlayerIDBoxes(struct TableInfo *t);



// Flag the cardroom window needs redrawing and post a message

// to its message queue if necessary.

void FlagRedrawCardRoom(void);



ErrorType SendGamePlayerInputResult(struct GamePlayerInputResult *gpir);

ErrorType SendDataStructure(int data_type, void *data_structure_ptr, int data_structure_len);



// Send the ClientStateInfo structure for a table, provided it

// has changed since it was last sent.

ErrorType SendClientStateInfo(struct TableInfo *t);



// used by any dlg function that reads the phone number edit control

extern void FixUpPhoneNumberEditControl(HWND hPNEC);







void OpenSplashDialog(void);

void OpenCardRoom(void);

void CheckForNewGameList(ClientDisplayTabIndex client_display_tab_index);

void RequestTableInfo(WORD32 table_serial_number, int subscribe_flag);

void RequestAllTableLists(void);

int ShowTableWindow(WORD32 table_serial_number);

int ShowTableWindow(WORD32 table_serial_number, int steal_focus_flag);

void ShowTableWindowIfPlaying(struct TableInfo *t);

void OpenNewTableWindow(WORD32 table_serial_number,

		ClientDisplayTabIndex client_display_tab_index,

		GameRules game_rules,

		int watching_flag, ChipType chip_type, int join_table_flags);

void SendLoginInfo(char *name, char *password, int request_priority_login_flag);

WORD32 SelectDefaultTable(ClientDisplayTabIndex client_display_tab_index, int force_stakes_match);

WORD32 SelectDefaultTable(ClientDisplayTabIndex client_display_tab_index);

BOOL CALLBACK dlgFuncWaitList(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgTableBuyInFunc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgAboutBoxFunc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgLoginFunc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgFuncChangePassword(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgFuncChangeEmail(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgTournSummaryRecFunc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

BOOL CALLBACK dlgFuncUpdateAddressInfo(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);



BOOL CALLBACK dlgFuncValidateEmail(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);







int LeaveTables(void);

int BuyIntoTable(JoinTableStatus jts, struct TableInfo *t, WORD32 minimum_required, int seating_postion);

void RemoveBuyInDLG();

void EnableSitDownButtons(WORD32 table_serial_number, int enable_flag);

int LogInToServer(char *detail_msg);

void OurHandDescription(struct TableInfo *t, char *hi_out, char *lo_out);

int BadTimeForIntensiveServerRequest(char *title, char *msg);





// sound index enum is in pplib.h

// filenames for the .wav files are in client.cpp near PPlaySound()

extern int SfxGlobalDisable;	// set if sfx are disabled globally (e.g. cmd line or something)

extern int SfxUserDisable;		// set if sfx are disabled by user (e.g. preferences dialog)

extern int SfxTempDisable;		// set if sfx are disabled termporarily for some programming reason

void PPlaySound(int sound_index);

void PreloadSoundFiles(void);	// Pre-load all sound files into memory



#if ADMIN_CLIENT

  // admin chat monitoring

  void RefreshMonitorChatText(void);

  void RefreshMonitorChatText(int force_update_flag);

  int UpdateAdminChatBuffer(struct GameChatMessage *gcm);

  // new info block has arrived

  void ProcessNewAdminInfoBlock(void);

#endif



// password encryption/decryption

char *EncryptPassword(char *plain_text);

char *DecryptPassword(char *encrypted_text);



// chat buffer functions

void RefreshChatText(int table_index);

int UpdateChatBuffer(struct GameChatMessage *gcm, int table_index);

int FlushDealerChatBuffer(int table_index);



void DealWithLoginStatus(int login_status);



char *TableNameFromSerialNumber(WORD32 table_serial_number);



// Update the title bars for all open tables

void UpdateTableWindowTitles(void);



// Find a table given its serial number and fill in a COPY of

// its CardRoom_TableSummaryInfo structure.

// Returns an error if it cannot find it.

ErrorType FindTableSummaryInfo(WORD32 table_serial_number, struct CardRoom_TableSummaryInfo *output_table_summary_info);



// Display the waiting list dialog.  Show existing one

// if it's already open.  Does not return until user finishes.

void WaitListDialog(HWND parent, WORD32 table_serial_number);



// Display the unjoin waiting list dialog.  Show existing one

// if it's already open.  Does not return until user finishes.

// Returns IDOK if user decided to unjoin.

int UnjoinWaitListDialog(HWND parent, WORD32 table_serial_number, int prompt);



// Display/update the 'seat avail' dialog box whenever something

// new arrives from the server.

void UpdateSeatAvailDialog(HWND parent);



#if 0	//19991102MB

// Display a dialog box to prompt the user to join a waiting

// list for the first game of a particular type.  This is designed

// to encourage them to come back at a pre-determined time (the

// top of the hour) and start a table.

void PromptUserToJoinWaitList(WORD32 table_serial_number);

#endif



// Find a open table window's index given the table serial number.

// Returns -1 if not found.

int TableIndexFromSerialNumber(WORD32 table_serial_number);



// Take a game serial number and return the appropriate pointer into

// the Table[] array.  Returns NULL if the table index could not be found.

// See also TableIndexFromSerialNumber().

struct TableInfo *TablePtrFromSerialNumber(WORD32 table_serial_number);



// Clear all in-turn actions for a table.  Does NOT send new

// ClientState structure to the server but it DOES update the

// checkboxes on the screen (whether they are shown or not).

// Don't set clear_checkboxes_flag unless you're calling from the message thread.

void ClearInTurnActions(struct TableInfo *t);

void ClearInTurnActions(struct TableInfo *t, int clear_checkboxes_flag);



// Count the number of open table windows.

int OpenTableCount(void);



// Open window and ask server to join a table.

void JoinTable(WORD32 table_serial_number);



// Display a struct MiscClientMessage from the server.

void ShowMiscClientMsg(HWND parent, struct MiscClientMessage *mcm, char *title);



// Pop up a dlg asking if we want to recieve a tournament email

void AskRequestTournamentEmail(HWND parent, struct MiscClientMessage *mcm);



// Grab a file from a URL and write it to a specific disk file.

ErrorType WriteFileFromUrl(HINTERNET inet_hndl, char *source_url, char *dest_path);



// Handle a received ServerVersionInfo structure.  This function

// must be called from the main message thread.  It will create

// a new thread to do the background work if necessary.

void CheckForUpgrade(int quietly_flag);



// Retrieve and display news from our web site.  The work is done

// by another thread, so this function will return immediately.

void DisplayNewsFromWebSite(void);



// Process the response to a GamePlayerInputRequest.  This

// includes filling in and sending out the GamePlayerInputResponse

// structure.

void ProcessGPIResult(struct TableInfo *table_ptr, int action_result);



// Update status and progress on the splash screen.

// Pass CONNSTAT_* as a parameter.

void UpdateSplashStatus(int connection_status);

extern int iConnectionStatus;			// CONNSTAT_*

enum {

	CONNSTAT_DISCONNECTED,

	CONNSTAT_RESOLVING,

	CONNSTAT_CONNECTING,

	CONNSTAT_SETTINGUP,

	CONNSTAT_EXCHANGING,

	CONNSTAT_CONNECTED,

};



// Handle the user pressing the 'Leave Table' button

// return: FALSE: no problem, table was closed.

//			TRUE: close was cancelled.

int HandleLeaveTableButton(struct TableInfo *table_ptr);

int HandleLeaveTableButton(struct TableInfo *table_ptr, int show_cardroom_flag);



// Load the chip bitmaps into memory.

void LoadChipBitmaps(HPALETTE hpal, ChipType chip_type);



// Draw stacks of chips at a specific coordinate.

void DrawChips(BlitQueue *q, LPPOINT dest_pt, int preferred_stack_size, int amount);



// Draw all the chips at a table.  This includes all players,

// the pot(s), and the rake.  This function might be called when

// the chips update OR when processing WM_PAINT.

void DrawAllChips(struct TableInfo *table);



// Get the coordinates for a picture control on a table.

void GetPictureCoordsOnTable(struct TableInfo *table, int control_id, LPPOINT output_pt);



// Load the card bitmaps into memory.

void LoadCardBitmaps(HPALETTE hpal);



// Draw a hand of cards at a specific coordinate.

// card_array points to the cards.  card_count tells how many cards

// are in that array.  style=0 produces seperated cards (for the flop).

// style=1 produces overlapped cards.

void DrawCards(BlitQueue *q, LPPOINT dest_pt, Card *card_array, int card_count, int style, int draw_priority);



// Draw all the cards at a table.  This includes all players and

// the flop.  This function might be called when the cards update

// OR when processing WM_PAINT.

void DrawAllCards(struct TableInfo *table);



// Load the snack bitmaps into memory.

void LoadBarSnackBitmaps(HPALETTE hpal);



extern char *BarSnackNames[];	// text for drop-down menu



// Draw all the snacks at a table.

void DrawAllBarSnacks(struct TableInfo *t);



enum {

	// Table bitmaps...

	MISCBITMAP_PLAYER_ID,

	MISCBITMAP_PLAYER_TURN,

	MISCBITMAP_SITDOWN,

	MISCBITMAP_LEAVETABLE,		// 'leave table' gold button

	MISCBITMAP_CARDROOM,		// 'view lobby' gold button

	MISCBITMAP_CHIP_TRAY_R,		// rollover state for the chip tray

	MISCBITMAP_CHIP_TRAY_RM_R,	// rollover state for the chip tray (real money)

	MISCBITMAP_MENU_BUTTON,		// normal state for drink icon to bring up snack menu

	MISCBITMAP_MENU_BUTTON_R,	// rollover state for drink icon to bring up snack menu

	MISCBITMAP_PLAY_BUTTON,		// fold/call/raise backgrounds

	MISCBITMAP_PLAY_BUTTON_D,	// fold/call/raise backgrounds (darkened)

	MISCBITMAP_PLAY_BUTTON_B,	// fold/call/raise backgrounds (brightened)



	// Lobby bitmaps...

	MISCBITMAP_GOTO_TABLE_UP,

	MISCBITMAP_GOTO_TABLE_ROLL,//#13
		//cristian 07-22-2003
	MISCBITMAP_LINK_LOBBY_NORMAL,//#14
    MISCBITMAP_LINK_LOBBY_HOVER, //#15
	//end cristian 07-22-2003 


	MISCBITMAP_WAITLIST_UP,

	MISCBITMAP_WAITLIST_ROLL,
	



	//rgong 04/04/2002 - 2

	MISCBITMAP_NEWS_BUTTON,

	MISCBITMAP_NEWS_DETAILS,

	//end rgong



	MISCBITMAP_CASHIER_UP,

	MISCBITMAP_CASHIER_ROLL,



	// Cashier bitmaps

	MISCBITMAP_CASHIER_BUY_UP,

	MISCBITMAP_CASHIER_BUY_ROLL,//21

	MISCBITMAP_CASHIER_CASHOUT_UP,//#22

	MISCBITMAP_CASHIER_CASHOUT_ROLL,

	//rgong 04/04/2002

	MISCBITMAP_CASHIER_DOWNLOAD1_UP,

	MISCBITMAP_CASHIER_DOWNLOAD1_ROLL,

	MISCBITMAP_CASHIER_DOWNLOAD2_UP,

	MISCBITMAP_CASHIER_DOWNLOAD2_ROLL,

	//end rgong



	MISCBITMAP_CASHIER_HISTORY_UP,

	MISCBITMAP_CASHIER_HISTORY_ROLL,

	MISCBITMAP_CASHIER_LEAVE_UP,

	MISCBITMAP_CASHIER_LEAVE_ROLL,

	MISCBITMAP_CASHIER_PAYPAL,

	MISCBITMAP_CASHIER_BANK_DRAFT,

	MISCBITMAP_CASHIER_WESTERN_UNION,//#34

	MISCBITMAP_CASHIER_VISA_MASTERCARD,

	//rgong

	MISCBITMAP_CASHIER_FIREPAY,

	MISCBITMAP_CASHIER_VISA,

	MISCBITMAP_CASHIER_MASTERCARD,

	MISCBITMAP_CASHIER_ABOUTPAYPAL,

	MISCBITMAP_CASHIER_ABOUTFIREPAY,//#40

	MISCBITMAP_CASHIER_SIGNFIREPAY,

	//end rgong

	MISCBITMAP_CASHIER_SETUP_UP,

	MISCBITMAP_CASHIER_SETUP_ROLL,
	



	MISCBITMAP_SNACKMENU_START,

	MISCBITMAP_SNACKMENU_CANCEL_R = MISCBITMAP_SNACKMENU_START,

	MISCBITMAP_SNACKMENU_NOSMOKING_R,

	MISCBITMAP_SNACKMENU_NOTHING_R,



	MISCBITMAP_SNACKMENU_CAKE,

	MISCBITMAP_SNACKMENU_MUFFIN,

	MISCBITMAP_SNACKMENU_DOUGHNUTS,

	MISCBITMAP_SNACKMENU_STRAWBERRIES,

	MISCBITMAP_SNACKMENU_HOTDOG,

	MISCBITMAP_SNACKMENU_HAMBURGER,

	MISCBITMAP_SNACKMENU_BEER_DRAFT,

	MISCBITMAP_SNACKMENU_BEER_DOMESTIC,

	MISCBITMAP_SNACKMENU_BEER_IMPORTED,

	MISCBITMAP_SNACKMENU_CHICHI,

	MISCBITMAP_SNACKMENU_MARTINI,

	MISCBITMAP_SNACKMENU_COSMO,

	MISCBITMAP_SNACKMENU_LIME_MARG,

	MISCBITMAP_SNACKMENU_PINK_MARG,

	MISCBITMAP_SNACKMENU_RUM_AND_COKE,

	MISCBITMAP_SNACKMENU_REDWINE,

	MISCBITMAP_SNACKMENU_CHAMPAGNE,

	MISCBITMAP_SNACKMENU_BRANDY,

	MISCBITMAP_SNACKMENU_IRISH_COFFEE,

	MISCBITMAP_SNACKMENU_TEA,

	MISCBITMAP_SNACKMENU_COFFEE,

	MISCBITMAP_SNACKMENU_ICED_TEA,

	MISCBITMAP_SNACKMENU_COKE,

	MISCBITMAP_SNACKMENU_WATER,

	MISCBITMAP_SNACKMENU_LEMONADE,

	MISCBITMAP_SNACKMENU_CIGAR,

	MISCBITMAP_SNACKMENU_CIGARETTE,



	MISCBITMAP_SNACKMENU_END = MISCBITMAP_SNACKMENU_CIGARETTE,


    
	MISCBITMAP_COUNT
	

};

extern HBITMAP MiscBitmaps[MISCBITMAP_COUNT];



// Load the misc bitmaps into memory.

void LoadLobbyBitmaps(HPALETTE hpal);

void LoadTableBitmaps(HPALETTE hpal);

void LoadCashierBitmaps(HPALETTE hpal);

void LoadSnackMenuBitmaps(HPALETTE hpal);



// Draw a button control that had "owner draw" and "transparent" set

// in the resource file.  Use the specified bitmap image index (see MISCBITMAP_*)

void DrawButtonItemWithBitmap(struct TableInfo *t, LPDRAWITEMSTRUCT dis, int bitmap_index);

void DrawButtonItemWithBitmap(HBITMAP bgnd_bitmap, LPDRAWITEMSTRUCT dis, int bitmap_index);

void DrawButtonItemWithBitmap(struct TableInfo *t, LPDRAWITEMSTRUCT dis, int bitmap_index, HBITMAP bgnd_bitmap);



// Draw a button control that had "owner draw" and "transparent" set

// in the resource file.  Use the specified bitmap image

// index (see MISCBITMAP_*) and also draw the text.

void DrawButtonItemWithBitmapAndText(struct TableInfo *t, LPDRAWITEMSTRUCT dis, int bitmap_index, HFONT hfont);

void DrawButtonItemWithBitmapAndText(struct TableInfo *t, LPDRAWITEMSTRUCT dis, int bitmap_index, HFONT hfont, COLORREF *color_array);

void DrawButtonItemWithBitmapAndText(struct TableInfo *t, LPDRAWITEMSTRUCT dis, int bitmap_index, HFONT *font_array, COLORREF *color_array);



// Draw a string centered on a point.  Unlike the Windows DrawText()

// function, this one can handle more than one line of text.

void DrawCenteredText(HDC hdc, char *str, int cx, int cy);

void DrawCenteredText(HDC hdc, char *str, int cx, int cy, HFONT *font_array);



// Create a new account.

// Returns IDCANCEL, IDOK, or IDRETRY.

int CreateNewAccount(void);



// Make sure our account is real money ready.

// Returns IDCANCEL, IDOK, or IDRETRY.

int MakeAccountRealMoneyReady(void);



// Handle the receipt of a misc client message from the server

// related to creating an account.

void HandleCreateAccountResult(struct MiscClientMessage *mcm);



// Open a new progress window.

// Returns handle to the window.

// Close the window using FinishProgressWindow()

HWND CreateProgressWindow(HWND owner_hwnd, char *msg, int percent_to_stop_at, int duration_in_ms);



// Close an already open progress window opened by CreateProgressWindow()

void FinishProgressWindow(HWND hwnd, int duration_in_ms);



// Fill in and send out a DATATYPE_CLIENT_PLATFORM packet.

void SendClientPlatformInfo(void);



// Add/Remove any menu items for the various open tables

void UpdateTableMenuItems(void);



// Prompt user to tell their friends

void PromptUserToTellTheirFriends(void);



// Dispatch all pending messages for a particular dialog window

void DispatchMessagesForHwnd(HWND hwnd);



#if ADMIN_CLIENT

// Bring up the administrator's account editing dialog box.

void OpenAdminEditAccountDialog(void);

void RequestAdminInfo(MiscMessageRequestInfo info_type, WORD32 param1, WORD32 param2, WORD32 param3, WORD32 param4);

void SendPlayerGAIRLetter(HWND hDlg, WORD32 player_id, char *user_id, int hand_number);

#endif	 // ADMIN_CLIENT



// Process the receipt of a new account record from the server

// (this is called from the comm thread and must not block)

ErrorType ProcessAccountRecord(struct AccountRecord *ar, int input_structure_len, int packet_type);


extern volatile WORD32 RealChipsInBank;

extern volatile WORD32 RealChipsInPlay;

extern volatile WORD32 FakeChipsInBank;

extern volatile WORD32 FakeChipsInPlay;

extern volatile WORD32 PendingCredit;

extern volatile WORD32 PendingCheck;

extern volatile WORD32 PendingPaypal;

extern volatile WORD32 CreditFeePoints;

//rgong

extern volatile INT32  GoodRakedGames;

//end rgong



extern int LoggedIn;			// logged-in status (defined in pplib.h as LOGIN_*)

extern int LoggedInPrivLevel; 	// current priv level if logged in (ACCPRIV_* in gamedata.h)

extern int AutoLoginFlag;		// set to automatically login (cmd line 'autologin')



extern HWND hBuyInDLG;			// handle to buy-in dialog, if it exists

extern HWND hCashierDlg;		// handle to cashier dlg, if it exists

extern HWND hReqHandHistory;	// handle to request hand history dlg



// called when a chat message is received -- in table.cpp

extern int UpdateChatBuffer(GameChatMessage *gcm, int table_index);

extern void	RefreshChatText(int table_index);



// Open and/or show the cashier screen.  Make sure the client is

// logged in first.  This function must be called from the message thread.

void OpenCashierScreen(void);



// Open and/or show the snack menu screen.

// This function must be called from the message thread.

void OpenSnackMenuWindow(struct TableInfo *t);

// Close a snack menu if it's open

void CloseSnackMenuWindow(void);



// Intiate the process for the user to set up their account for

// real money.  This is a function called by the message thread

// to prompt the user about what to do, then bring up the cashier

// for them.

void InitiateRealMoneyAccountSetup(void);



extern struct MiscClientMessage MiscMsgCCBuyinLimits;	// msg[] contains description of CC buy-in limits for 'buy chips' screen

extern struct MiscClientMessage MiscMsgCreateAccountWarning;// msg[] contains warning before setting up for real money



// Functions for the broadcast message code...

extern WORD32 dwBroadcastDestPlayerID;

BOOL CALLBACK dlgFuncEnterBroadcastMessage(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);



// Pick a good window for a random message.  It might be for

// misc client message, a seat avail message, or who knows what.

// If there is a table active, make the table the owner of the message

// rather than the lobby.  If the lobby pops up too much while playing, it's

// really annoying.

HWND PickWindowForRandomMessage(HWND default_hwnd);



#if ADMIN_CLIENT

void OpenAdminStatsWindow(void);		// open the admin stats window

extern struct AdminStats AdminStats;	// saved AdminStats structure from server

extern struct AdminInfoBlock AdminInfo;	// admin info block from server

BOOL CALLBACK dlgFuncAdminCheckRun(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

extern struct AdminCheckRun AdminCheckRun;	// admin only: saved check run info from server.

BOOL CALLBACK dlgSetCCLimits(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam);

void FillCCLimitsForAccountRecord(AccountRecord *ar, AccountRecord arIn);

extern void Convert_time_t_to_SYSTEMTIME(time_t t, SYSTEMTIME *sys_time);

extern void Convert_SYSTEMTIME_to_time_t(SYSTEMTIME *sys_time, time_t *t);





// Save any new shot clock messages.  Keep the last bunch seen.

void SaveShotClockMessages( char *shot_clock_msg1,

							char *shot_clock_msg2,

							char *shot_clock_msg1_expired,

							char *shot_clock_msg2_expired);

#endif

// Convert seconds_to_go to a string for the shot clock

void ConvertSecondsToString(int seconds_to_go, char *dest_str, int display_seconds_flag, int display_short_units_flag, int display_field_count);



// Trim leading/trailing spaces from a string

char *TrimString(char *str, int max_str_len);





// Save the computer serial number to the registry

// Only writes it if it's not already there.

void SaveComputerSerialNumber(WORD32 computer_serial_number);



#endif // _CLIENT_H_INCLUDED

